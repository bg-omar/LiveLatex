<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/omariskandarani/livelatex/actions/NewTikzFigureAction.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/omariskandarani/livelatex/actions/NewTikzFigureAction.kt" />
              <option name="originalContent" value="package com.omariskandarani.livelatex.actions&#10;&#10;import com.intellij.openapi.actionSystem.AnAction&#10;import com.intellij.openapi.actionSystem.AnActionEvent&#10;import com.intellij.openapi.actionSystem.CommonDataKeys&#10;import com.intellij.openapi.command.WriteCommandAction&#10;import com.intellij.openapi.project.Project&#10;import com.intellij.openapi.ui.DialogWrapper&#10;import com.intellij.openapi.ui.Messages&#10;import com.omariskandarani.livelatex.util.LatexUtils&#10;&#10;class NewTikzFigureAction : AnAction(&quot;New TikZ Figure…&quot;, &quot;Draw a quick TikZ picture and insert it&quot;, null) {&#10;&#10;    override fun actionPerformed(e: AnActionEvent) {&#10;        val project = e.project ?: return&#10;        val editor = e.getData(CommonDataKeys.EDITOR) ?: return&#10;        val document = editor.document&#10;&#10;        val tikzPreamble = &quot;&quot;&quot;&#10;            % ------- TikZ Preamble -------&#10;            \RequirePackage{tikz}&#10;            \usetikzlibrary{knots,hobby,calc,intersections,decorations.pathreplacing,shapes.geometric,spath3}&#10;            % ------- Shared styles (from your preamble) -------&#10;            \tikzset{&#10;                knot diagram/every strand/.append style={ultra thick, black},&#10;                every path/.style={black,line width=2pt},&#10;                every node/.style={transform shape,knot crossing,inner sep=1.5pt},&#10;                every knot/.style={line cap=round,line join=round,very thick},&#10;                strand/.style={line cap=round,line join=round,line width=3pt,draw=black},&#10;                over/.style={preaction={draw=white,line width=6.5pt}},&#10;                sst/ring A/.style={draw=black, line width=3pt},&#10;                sst/ring B/.style={draw=black,  line width=3pt},&#10;                sst/ring C/.style={draw=black, line width=3pt},&#10;            }&#10;            % ------- Guides toggle -------&#10;            \newif\ifsstguides&#10;            \sstguidestrue&#10;            % ------- Helper: label &amp; skeleton for points P1..Pn -------&#10;            \newcommand{\SSTGuidesPoints}[2]{% #1=basename (e.g. P), #2=last index&#10;                \ifsstguides&#10;                \foreach \i in {1,...,#2}{&#10;                    \fill[blue] (#1\i) circle (1.2pt);&#10;                    \node[blue,font=\scriptsize,above] at (#1\i) {\i};&#10;                }&#10;                \draw[gray!40, dashed] \foreach \i [remember=\i as \lasti (initially 1)] in {2,...,#2,1} { (#1\lasti)--(#1\i) };&#10;                \fi&#10;            }&#10;        &quot;&quot;&quot;.trimIndent()&#10;&#10;        val dialog = TikzCanvasDialog(project)&#10;        if (!dialog.showAndGet()) return  // cancelled&#10;&#10;        val tikzBody = dialog.resultTikz ?: return&#10;&#10;        // Check if preamble is present&#10;        val docText = document.text&#10;        val preambleKey = &quot;\\usetikzlibrary{knots,hobby,calc,intersections,decorations.pathreplacing,shapes.geometric,spath3}&quot;&#10;        var preambleInserted = false&#10;        WriteCommandAction.runWriteCommandAction(project) {&#10;            if (!docText.contains(preambleKey)) {&#10;                // Insert after \documentclass if present, else at top&#10;                val docClassRegex = Regex(&quot;\\\\documentclass.*\\n&quot;)&#10;                val match = docClassRegex.find(docText)&#10;                val insertPos = match?.range?.last?.plus(1) ?: 0&#10;                document.insertString(insertPos, tikzPreamble + &quot;\n\n&quot;)&#10;                preambleInserted = true&#10;            }&#10;            val code = &quot;&quot;&quot;&#10;                \begin{tikzpicture}[scale=1]&#10;                $tikzBody&#10;                \end{tikzpicture}&#10;            &quot;&quot;&quot;.trimIndent()&#10;            val caret = editor.caretModel.currentCaret&#10;            document.insertString(caret.offset, code)&#10;        }&#10;        if (preambleInserted) {&#10;            Messages.showInfoMessage(project, &quot;TikZ preamble inserted at top of document.&quot;, &quot;TikZ Preamble Added&quot;)&#10;        }&#10;    }&#10;&#10;    override fun update(e: AnActionEvent) {&#10;        val vFile = e.getData(CommonDataKeys.VIRTUAL_FILE)&#10;        val ext = vFile?.extension?.lowercase()&#10;        e.presentation.isEnabledAndVisible = ext in setOf(&quot;tex&quot;, &quot;sty&quot;, &quot;tikz&quot;)&#10;    }&#10;&#10;    override fun getActionUpdateThread(): com.intellij.openapi.actionSystem.ActionUpdateThread {&#10;        return com.intellij.openapi.actionSystem.ActionUpdateThread.BGT&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.omariskandarani.livelatex.actions&#10;&#10;import com.intellij.openapi.actionSystem.AnAction&#10;import com.intellij.openapi.actionSystem.AnActionEvent&#10;import com.intellij.openapi.actionSystem.CommonDataKeys&#10;import com.intellij.openapi.command.WriteCommandAction&#10;import com.intellij.openapi.project.Project&#10;import com.intellij.openapi.ui.DialogWrapper&#10;import com.intellij.openapi.ui.Messages&#10;import com.omariskandarani.livelatex.util.LatexUtils&#10;&#10;class NewTikzFigureAction : AnAction(&quot;New TikZ Figure…&quot;, &quot;Draw a quick TikZ picture and insert it&quot;, null) {&#10;&#10;    override fun actionPerformed(e: AnActionEvent) {&#10;        val project = e.project ?: return&#10;        val editor = e.getData(CommonDataKeys.EDITOR) ?: return&#10;        val document = editor.document&#10;&#10;        val tikzPreamble = &quot;&quot;&quot;&#10;            % ------- TikZ Preamble -------&#10;            \RequirePackage{tikz}&#10;            \usetikzlibrary{knots,hobby,calc,intersections,decorations.pathreplacing,shapes.geometric,spath3}&#10;            % ------- Shared styles (from your preamble) -------&#10;            \tikzset{&#10;                knot diagram/every strand/.append style={ultra thick, black},&#10;                every path/.style={black,line width=2pt},&#10;                every node/.style={transform shape,knot crossing,inner sep=1.5pt},&#10;                every knot/.style={line cap=round,line join=round,very thick},&#10;                strand/.style={line cap=round,line join=round,line width=3pt,draw=black},&#10;                over/.style={preaction={draw=white,line width=6.5pt}},&#10;                sst/ring A/.style={draw=black, line width=3pt},&#10;                sst/ring B/.style={draw=black,  line width=3pt},&#10;                sst/ring C/.style={draw=black, line width=3pt},&#10;            }&#10;            % ------- Guides toggle -------&#10;            \newif\ifsstguides&#10;            \sstguidestrue&#10;            % ------- Helper: label &amp; skeleton for points P1..Pn -------&#10;            \newcommand{\SSTGuidesPoints}[2]{% #1=basename (e.g. P), #2=last index&#10;                \ifsstguides&#10;                \foreach \i in {1,...,#2}{&#10;                    \fill[blue] (#1\i) circle (1.2pt);&#10;                    \node[blue,font=\scriptsize,above] at (#1\i) {\i};&#10;                }&#10;                \draw[gray!40, dashed] \foreach \i [remember=\i as \lasti (initially 1)] in {2,...,#2,1} { (#1\lasti)--(#1\i) };&#10;                \fi&#10;            }&#10;        &quot;&quot;&quot;.trimIndent()&#10;&#10;        val dialog = TikzCanvasDialog(project)&#10;        if (!dialog.showAndGet()) return  // cancelled&#10;&#10;        val tikzBody = dialog.resultTikz ?: return&#10;&#10;        // Check if preamble is present&#10;        val docText = document.text&#10;        val preambleKey = &quot;\\usetikzlibrary{knots,hobby,calc,intersections,decorations.pathreplacing,shapes.geometric,spath3}&quot;&#10;        var preambleInserted = false&#10;        WriteCommandAction.runWriteCommandAction(project) {&#10;            if (!docText.contains(preambleKey)) {&#10;                // Insert after \documentclass if present, else at top&#10;                val docClassRegex = Regex(&quot;\\\\documentclass.*\\n&quot;)&#10;                val match = docClassRegex.find(docText)&#10;                val insertPos = match?.range?.last?.plus(1) ?: 0&#10;                document.insertString(insertPos, tikzPreamble + &quot;\n\n&quot;)&#10;                preambleInserted = true&#10;            }&#10;            val code = &quot;&quot;&quot;&#10;                \begin{tikzpicture}[scale=1]&#10;                $tikzBody&#10;                \end{tikzpicture}&#10;            &quot;&quot;&quot;.trimIndent()&#10;            val caret = editor.caretModel.currentCaret&#10;            document.insertString(caret.offset, code)&#10;        }&#10;        if (preambleInserted) {&#10;            Messages.showInfoMessage(project, &quot;TikZ preamble inserted at top of document.&quot;, &quot;TikZ Preamble Added&quot;)&#10;        }&#10;    }&#10;&#10;    override fun update(e: AnActionEvent) {&#10;        val vFile = e.getData(CommonDataKeys.VIRTUAL_FILE)&#10;        val ext = vFile?.extension?.lowercase()&#10;        e.presentation.isEnabledAndVisible = ext in setOf(&quot;tex&quot;, &quot;sty&quot;, &quot;tikz&quot;)&#10;    }&#10;&#10;    override fun getActionUpdateThread(): com.intellij.openapi.actionSystem.ActionUpdateThread {&#10;        return com.intellij.openapi.actionSystem.ActionUpdateThread.BGT&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>